#include <stdio.h>  
  
// 插入排序函数  
// arr[] 是要排序的数组，n 是数组中的元素个数  
void insertionSort(int arr[], int n) {  
    int i, key, j;  
    // 外层循环，从数组的第二个元素开始迭代（因为第一个元素默认已经排序）  
    for (i = 1; i < n; i++) {  
        key = arr[i]; // 选取当前未排序部分的第一个元素作为关键字  
        j = i - 1;  
  
        /* 内层循环，将大于key的元素向后移动一位，为key腾出插入的位置 */  
        // 注意这里的条件是j >= 0 && arr[j] > key  
        // j >= 0 确保不会越界  
        // arr[j] > key 确保只有比key大的元素才会向后移动  
        while (j >= 0 && arr[j] > key) {  
            arr[j + 1] = arr[j]; // 将比key大的元素向后移动  
            j = j - 1; // 继续向前比较  
        }  
        arr[j + 1] = key; // 当找到key的正确位置时，将其插入  
    }  
}  
  
// 打印数组函数  
// arr[] 是要打印的数组，size 是数组中的元素个数  
void printArray(int arr[], int size) {  
    int i;  
    for (i = 0; i < size; i++)  
        printf("%d ", arr[i]); // 打印每个元素，后跟一个空格  
    printf("\n"); // 打印完所有元素后换行  
}  
  
// 主函数来测试插入排序  
int main() {  
    int arr[] = {12, 11, 13, 5, 6}; // 定义一个整数数组  
    int n = sizeof(arr) / sizeof(arr[0]); // 计算数组的元素个数  
  
    // 调用插入排序函数对数组进行排序  
    insertionSort(arr, n);  
  
    // 打印排序后的数组  
    printf("Sorted array: \n");  
    printArray(arr, n);  
  
    return 0; // 程序正常结束  
}
